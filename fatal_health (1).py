# -*- coding: utf-8 -*-
"""fatal_health.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dtOMXZKv_B09ZfUz36hVLHgyRRQhqtog

## IMPORT LIBRARY
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import classification_report, confusion_matrix

"""## LOAD DATA"""

df = pd.read_csv("fetal_health.csv")

df.head()

df.info()

df.describe()

df.isnull().sum()

df.duplicated().sum()

"""## EDA"""

import matplotlib.pyplot as plt
import seaborn as sns

sns.countplot(x='fetal_health', data=df)
plt.title('Distribusi Kelas Fetal Health')
plt.xlabel('Fetal Health Class')
plt.ylabel('Jumlah')
plt.show()

# Menghitung korelasi antar fitur
correlation_matrix = df.corr(numeric_only=True)

# Membuat heatmap korelasi
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm', square=True)
plt.title('Heatmap Korelasi Antar Fitur')
plt.show()

"""## Pre Processing"""

#Pisahkan fitur dan label
X = df.drop("fetal_health", axis=1)
y = df["fetal_health"]

#Normalisasi fitur
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#One-hot encode label (jika multi-kelas)
y_encoded = to_categorical(y - 1)  # karena label mulai dari 1, dikurangi

"""## SPLIT DATA"""

#Split dataset
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y_encoded, test_size=0.2, random_state=42, stratify=y
)

"""## MODELLING"""

#Bangun model deep learning
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(X.shape[1],)))
model.add(Dropout(0.3))
model.add(Dense(32, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(3, activation='softmax'))  # karena 3 kelas

#Compile model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

#Train model
history = model.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.2)

"""## EVALUASI"""

#Evaluasi model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Akurasi: {accuracy:.2f}")

# Prediksi dan laporan evaluasi
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_true_classes = np.argmax(y_test, axis=1)

print("\nClassification Report:")
print(classification_report(y_true_classes, y_pred_classes))

print("Confusion Matrix:")
print(confusion_matrix(y_true_classes, y_pred_classes))

"""## VISUALISASI"""

import matplotlib.pyplot as plt

# Visualisasi akurasi
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy', color='blue')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy', color='green')
plt.title('Akurasi Selama Training')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# Visualisasi loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss', color='red')
plt.plot(history.history['val_loss'], label='Validation Loss', color='orange')
plt.title('Loss Selama Training')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Prediksi model (contoh data)
y_test_classes = [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]
y_pred_classes = [0, 1, 1, 0, 0, 2, 0, 1, 2, 0, 1, 2]

# Buat Confusion Matrix
cm = confusion_matrix(y_test_classes, y_pred_classes)

# Visualisasi Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Normal', 'Suspect', 'Pathological'],
            yticklabels=['Normal', 'Suspect', 'Pathological'])
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()